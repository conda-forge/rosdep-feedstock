diff --git a/src/rosdep2/catkin_support.py b/src/rosdep2/catkin_support.py
index 4fb3fb3b8..f57b0410a 100644
--- a/src/rosdep2/catkin_support.py
+++ b/src/rosdep2/catkin_support.py
@@ -104,7 +104,7 @@ def get_catkin_view(rosdistro_name, os_name, os_version, update=True):
     sources_list_dir = get_sources_list_dir()
     if not os.path.exists(sources_list_dir):
         raise ValidationFailed("""rosdep database is not initialized, please run:
-\tsudo rosdep init
+\rosdep init
 """)
 
     if update:
diff --git a/src/rosdep2/installers.py b/src/rosdep2/installers.py
index 2f4c1cd1e..72c913061 100644
--- a/src/rosdep2/installers.py
+++ b/src/rosdep2/installers.py
@@ -325,7 +325,7 @@ def __init__(self, detect_fn, supports_depends=False):
         self.detect_fn = detect_fn
         self.supports_depends = supports_depends
         self.as_root = True
-        self.sudo_command = 'sudo -H' if os.geteuid() != 0 else ''
+        self.sudo_command = 'sudo -H' if hasattr(os, 'geteuid') and os.geteuid() != 0 else ''
 
     def elevate_priv(self, cmd):
         """
diff --git a/src/rosdep2/main.py b/src/rosdep2/main.py
index 268fcbdc1..073dac52e 100644
--- a/src/rosdep2/main.py
+++ b/src/rosdep2/main.py
@@ -153,7 +153,10 @@ def rosdep_main(args=None):
     except UsageError as e:
         print(_usage, file=sys.stderr)
         print('ERROR: %s' % (str(e)), file=sys.stderr)
-        sys.exit(os.EX_USAGE)
+        if hasattr(os, 'EX_USAGE'):
+            sys.exit(os.EX_USAGE)
+        else:
+            sys.exit()
     except RosdepInternalError as e:
         print("""
 ERROR: Rosdep experienced an internal error.
@@ -174,7 +177,7 @@ def rosdep_main(args=None):
         sys.exit(1)
     except CachePermissionError as e:
         print(str(e))
-        print("Try running 'sudo rosdep fix-permissions'")
+        print("Try running 'rosdep fix-permissions'")
         sys.exit(1)
     except UnsupportedOs as e:
         print('Unsupported OS: %s\nSupported OSes are [%s]' % (e.args[0], ', '.join(e.args[1])), file=sys.stderr)
@@ -212,11 +215,11 @@ def check_for_sources_list_init(sources_cache_dir):
 
     sources_list_dir = get_sources_list_dir()
     if not os.path.exists(sources_list_dir):
-        commands.insert(0, 'sudo rosdep init')
+        commands.insert(0, 'rosdep init')
     else:
         filelist = [f for f in os.listdir(sources_list_dir) if f.endswith('.list')]
         if not filelist:
-            commands.insert(0, 'sudo rosdep init')
+            commands.insert(0, 'rosdep init')
 
     if commands:
         commands = '\n'.join(['    %s' % c for c in commands])
@@ -499,9 +502,9 @@ def _package_args_handler(command, parser, options, args):
     if command in ['install', 'check', 'keys'] and options.ignore_src:
         if options.verbose:
             print('Searching ROS_PACKAGE_PATH for '
-                  'sources: ' + str(os.environ['ROS_PACKAGE_PATH'].split(':')))
+                  'sources: ' + str(os.environ['ROS_PACKAGE_PATH'].split(os.pathsep)))
         ws_pkgs = get_workspace_packages()
-        for path in os.environ['ROS_PACKAGE_PATH'].split(':'):
+        for path in os.environ['ROS_PACKAGE_PATH'].split(os.pathsep):
             path = os.path.abspath(path.strip())
             if os.path.exists(path):
                 pkgs = find_catkin_packages_in(path, options.verbose)
@@ -604,7 +607,7 @@ def command_init(options):
         print('ERROR: cannot create %s:\n\t%s' % (path, e), file=sys.stderr)
         return 2
     except OSError as e:
-        print("ERROR: cannot create %s:\n\t%s\nPerhaps you need to run 'sudo rosdep init' instead" % (path, e), file=sys.stderr)
+        print("ERROR: cannot create %s:\n\t%s\nPerhaps you need to run 'rosdep init' instead" % (path, e), file=sys.stderr)
         return 3
     finally:
         os.umask(old_umask)
@@ -626,12 +629,12 @@ def update_error_handler(data_source, exc):
     warnings.filterwarnings('ignore', category=PreRep137Warning)
 
     if not os.path.exists(sources_list_dir):
-        print('ERROR: no sources directory exists on the system meaning rosdep has not yet been initialized.\n\nPlease initialize your rosdep with\n\n\tsudo rosdep init\n')
+        print('ERROR: no sources directory exists on the system meaning rosdep has not yet been initialized.\n\nPlease initialize your rosdep with\n\n\trosdep init\n')
         return 1
 
     filelist = [f for f in os.listdir(sources_list_dir) if f.endswith('.list')]
     if not filelist:
-        print('ERROR: no data sources in %s\n\nPlease initialize your rosdep with\n\n\tsudo rosdep init\n' % sources_list_dir, file=sys.stderr)
+        print('ERROR: no data sources in %s\n\nPlease initialize your rosdep with\n\n\trosdep init\n' % sources_list_dir, file=sys.stderr)
         return 1
     try:
         print('reading in sources list data from %s' % (sources_list_dir))
@@ -639,7 +642,7 @@ def update_error_handler(data_source, exc):
         try:
             if os.geteuid() == 0:
                 print("Warning: running 'rosdep update' as root is not recommended.", file=sys.stderr)
-                print("  You should run 'sudo rosdep fix-permissions' and invoke 'rosdep update' again without sudo.", file=sys.stderr)
+                print("  You should run 'rosdep fix-permissions' and invoke 'rosdep update' again without sudo.", file=sys.stderr)
         except AttributeError:
             # nothing we wanna do under Windows
             pass
diff --git a/src/rosdep2/platforms/source.py b/src/rosdep2/platforms/source.py
index 862494b72..3ba17fedc 100644
--- a/src/rosdep2/platforms/source.py
+++ b/src/rosdep2/platforms/source.py
@@ -302,6 +302,7 @@ def install_source(resolved):
             rd_debug('Extracting tarball')
             tarf = tarfile.open(filename)
             tarf.extractall(tempdir)
+            tarf.close()
         else:
             rd_debug('Bypassing tarball extraction as it is a dmg')
         rd_debug('Running installation script')
diff --git a/src/rosdep2/shell_utils.py b/src/rosdep2/shell_utils.py
index f0cca1396..8dde39155 100644
--- a/src/rosdep2/shell_utils.py
+++ b/src/rosdep2/shell_utils.py
@@ -84,7 +84,8 @@ def create_tempfile_from_string_and_execute(string_script, path=None, exec_fn=No
 
     result = 1
     try:
-        fh = tempfile.NamedTemporaryFile('w', delete=False)
+        script_ext = '.bat' if os.name == 'nt' else ''
+        fh = tempfile.NamedTemporaryFile('w', suffix=script_ext, delete=False)
         fh.write(string_script)
         fh.close()
         rd_debug('Executing script below with cwd=%s\n{{{\n%s\n}}}\n' % (path, string_script))
diff --git a/src/rosdep2/sources_list.py b/src/rosdep2/sources_list.py
index bfec3a1d0..3a4dc3654 100644
--- a/src/rosdep2/sources_list.py
+++ b/src/rosdep2/sources_list.py
@@ -69,7 +69,7 @@
 
 # default file to download with 'init' command in order to bootstrap
 # rosdep
-DEFAULT_SOURCES_LIST_URL = 'https://raw.githubusercontent.com/ros/rosdistro/master/rosdep/sources.list.d/20-default.list'
+DEFAULT_SOURCES_LIST_URL = 'https://raw.githubusercontent.com/RoboStack/rosdistro/master/rosdep/sources.list.d/20-default.list'
 
 # seconds to wait before aborting download of rosdep data
 DOWNLOAD_TIMEOUT = 15.0
@@ -97,12 +97,7 @@ def get_sources_list_dirs(source_list_dir):
 
 def get_sources_list_dir():
     # base of where we read config files from
-    # TODO: windows
-    if 0:
-        # we can't use etc/ros because environment config does not carry over under sudo
-        etc_ros = rospkg.get_etc_ros_dir()
-    else:
-        etc_ros = '/etc/ros'
+    etc_ros = os.environ.get('ROS_ETC_DIR', '/etc/ros')
     # compute default system wide sources directory
     sys_sources_list_dir = os.path.join(etc_ros, 'rosdep', SOURCES_LIST_DIR)
     sources_list_dirs = get_sources_list_dirs(sys_sources_list_dir)
